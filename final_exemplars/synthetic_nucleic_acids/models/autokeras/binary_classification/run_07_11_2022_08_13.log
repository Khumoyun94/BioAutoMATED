2022-11-07 08:15:01,538 - log.py - [30m[47m[1m-------------------------------DeepSwarm settings-------------------------------[0m
2022-11-07 08:15:01,564 - log.py - [32m{
    "DeepSwarm": {
        "aco": {
            "ant_count": 1,
            "greediness": 0.5,
            "pheromone": {
                "decay": 0.1,
                "evaporation": 0.1,
                "start": 0.1,
                "verbose": false
            }
        },
        "backend": {
            "batch_size": 64,
            "epochs": 5,
            "loss": "binary_crossentropy",
            "patience": 5,
            "verbose": 0
        },
        "flat_nodes": [
            "FlattenNode",
            "DenseNode",
            "DropoutFlatNode",
            "BatchNormalizationFlatNode"
        ],
        "max_depth": 2,
        "metrics": "binary_crossentropy",
        "reuse_patience": 1,
        "save_folder": "./final_exemplars/synthetic_nucleic_acids/models/deepswarm/binary_classification/",
        "spatial_nodes": [
            "InputNode",
            "Conv2DNode",
            "DropoutSpatialNode",
            "BatchNormalizationNode",
            "Pool2DNode"
        ]
    },
    "Nodes": {
        "BatchNormalizationFlatNode": {
            "attributes": {},
            "transitions": {
                "DenseNode": 1.1,
                "DropoutFlatNode": 1.1,
                "OutputNode": 0.9
            },
            "type": "BatchNormalization"
        },
        "BatchNormalizationNode": {
            "attributes": {},
            "transitions": {
                "Conv2DNode": 1.1,
                "DropoutSpatialNode": 1.0,
                "FlattenNode": 1.0,
                "Pool2DNode": 1.1
            },
            "type": "BatchNormalization"
        },
        "Conv2DNode": {
            "attributes": {
                "activation": [
                    "ReLU"
                ],
                "filter_count": [
                    8,
                    16,
                    32,
                    64
                ],
                "kernel_size": [
                    1,
                    3,
                    5,
                    7
                ]
            },
            "transitions": {
                "BatchNormalizationNode": 1.2,
                "Conv2DNode": 0.8,
                "DropoutSpatialNode": 1.1,
                "FlattenNode": 1.0,
                "Pool2DNode": 1.2
            },
            "type": "Conv2D"
        },
        "DenseNode": {
            "attributes": {
                "activation": [
                    "ReLU",
                    "Sigmoid"
                ],
                "output_size": [
                    30,
                    64,
                    128,
                    256
                ]
            },
            "transitions": {
                "BatchNormalizationFlatNode": 1.2,
                "DenseNode": 0.8,
                "DropoutFlatNode": 1.2,
                "OutputNode": 1.0
            },
            "type": "Dense"
        },
        "DropoutFlatNode": {
            "attributes": {
                "rate": [
                    0.1,
                    0.3
                ]
            },
            "transitions": {
                "BatchNormalizationFlatNode": 1.0,
                "DenseNode": 1.0,
                "OutputNode": 0.9
            },
            "type": "Dropout"
        },
        "DropoutSpatialNode": {
            "attributes": {
                "rate": [
                    0.1,
                    0.3
                ]
            },
            "transitions": {
                "BatchNormalizationNode": 1.1,
                "Conv2DNode": 1.1,
                "FlattenNode": 1.0,
                "Pool2DNode": 1.0
            },
            "type": "Dropout"
        },
        "FlattenNode": {
            "attributes": {},
            "transitions": {
                "BatchNormalizationFlatNode": 0.9,
                "DenseNode": 1.0,
                "OutputNode": 0.8
            },
            "type": "Flatten"
        },
        "InputNode": {
            "attributes": {
                "shape": [
                    [
                        20,
                        4,
                        1
                    ]
                ]
            },
            "transitions": {
                "Conv2DNode": 1.0
            },
            "type": "Input"
        },
        "OutputNode": {
            "attributes": {
                "activation": [
                    "Softmax"
                ],
                "output_size": [
                    2
                ],
                "shape": [
                    2
                ]
            },
            "transitions": {},
            "type": "Output"
        },
        "Pool2DNode": {
            "attributes": {
                "pool_size": [
                    2
                ],
                "pool_type": [
                    "max",
                    "average"
                ],
                "stride": [
                    2,
                    3
                ]
            },
            "transitions": {
                "BatchNormalizationNode": 1.1,
                "Conv2DNode": 1.1,
                "FlattenNode": 1.0
            },
            "type": "Pool2D"
        }
    },
    "max_depth": 2,
    "script": "ipykernel_launcher.py",
    "settings_file": "/Users/jackie16201/Desktop/autoML/final_clean_BioSeqAutoML_for_publication/settings/default.yaml"
}[0m
2022-11-07 08:15:01,566 - log.py - [37m[42m[1m------------------------------STARTING ACO SEARCH-------------------------------[0m
2022-11-07 08:15:07,955 - log.py - [32m======= 
 Ant: 0x1451cd490 
 Loss: 0.248505 
 Accuracy: 0.882500 
 Path: InputNode(shape:(20, 4, 1)) -> Conv2DNode(activation:ReLU, filter_count:64, kernel_size:5) -> FlattenNode() -> OutputNode(activation:Softmax, output_size:2, shape:2) 
 Hash: ee325e092943c2191cade3719b8dbb1fd175046aa0c09a66d13e2aeb04e7c3d2 
=======[0m
2022-11-07 08:15:07,956 - log.py - [37m[42m[1m---------------------------Current search depth is 1----------------------------[0m
2022-11-07 08:15:07,957 - log.py - [30m[47m[1m--------------------------------GENERATING ANT 1--------------------------------[0m
2022-11-07 08:15:09,529 - log.py - [32m======= 
 Ant: 0x144282c50 
 Loss: 0.558737 
 Accuracy: 0.747500 
 Path: InputNode(shape:(20, 4, 1)) -> Conv2DNode(activation:ReLU, filter_count:8, kernel_size:5) -> FlattenNode() -> OutputNode(activation:Softmax, output_size:2, shape:2) 
 Hash: 5b2bea39cea5576e80ff1dc9668086cfcb7037f260cc44ebb378982e8423b9e4 
=======[0m
2022-11-07 08:15:09,530 - log.py - [30m[47m[1m---------------------------BEST ANT DURING ITERATION----------------------------[0m
2022-11-07 08:15:09,531 - log.py - [32m======= 
 Ant: 0x1451cd490 
 Loss: 0.248505 
 Accuracy: 0.882500 
 Path: InputNode(shape:(20, 4, 1)) -> Conv2DNode(activation:ReLU, filter_count:64, kernel_size:5) -> FlattenNode() -> OutputNode(activation:Softmax, output_size:2, shape:2) 
 Hash: ee325e092943c2191cade3719b8dbb1fd175046aa0c09a66d13e2aeb04e7c3d2 
=======[0m
2022-11-07 08:15:09,532 - log.py - [37m[42m[1m---------------------------Current search depth is 2----------------------------[0m
2022-11-07 08:15:09,533 - log.py - [30m[47m[1m--------------------------------GENERATING ANT 1--------------------------------[0m
2022-11-07 08:15:12,380 - log.py - [32m======= 
 Ant: 0x1476b0490 
 Loss: 0.610070 
 Accuracy: 0.747500 
 Path: InputNode(shape:(20, 4, 1)) -> Conv2DNode(activation:ReLU, filter_count:8, kernel_size:5) -> Pool2DNode(pool_size:2, pool_type:max, stride:2) -> FlattenNode() -> OutputNode(activation:Softmax, output_size:2, shape:2) 
 Hash: 6b0574e62fd8df5efdff299dc1d6a877777781e20d37e3814fef49b6b7a2e319 
=======[0m
2022-11-07 08:15:12,381 - log.py - [30m[47m[1m---------------------------BEST ANT DURING ITERATION----------------------------[0m
2022-11-07 08:15:12,382 - log.py - [32m======= 
 Ant: 0x1451cd490 
 Loss: 0.248505 
 Accuracy: 0.882500 
 Path: InputNode(shape:(20, 4, 1)) -> Conv2DNode(activation:ReLU, filter_count:64, kernel_size:5) -> FlattenNode() -> OutputNode(activation:Softmax, output_size:2, shape:2) 
 Hash: ee325e092943c2191cade3719b8dbb1fd175046aa0c09a66d13e2aeb04e7c3d2 
=======[0m
2022-11-07 08:15:12,889 - log.py - [30m[47m[1m-----------------------EVALUATING PERFORMANCE ON TEST SET-----------------------[0m
2022-11-07 08:15:12,981 - log.py - [32mAccuracy is 0.882500 and loss is 0.248505[0m
2022-11-07 08:15:15,922 - log.py - [30m[47m[1m-----------------------EVALUATING PERFORMANCE ON TEST SET-----------------------[0m
2022-11-07 08:15:16,013 - log.py - [32mAccuracy is 0.937500 and loss is 0.152390[0m
